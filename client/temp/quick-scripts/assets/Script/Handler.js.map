{"version":3,"sources":["Handler.js"],"names":["cc","Class","extends","Component","properties","event_atlas","default","type","SpriteAtlas","card_atlas","event","Node","card","multi_select_panel","multi_select_prefab","Prefab","modi","onLoad","on","EventType","TOUCH_START","onClick","bind","init","selects","state","father","event_type","card_type","active","sprite_name","evt_sprite","scale","win_type","eventframe","getSpriteFrame","getComponent","Sprite","spriteFrame","cardfame","value","old_scale","action1","scaleTo","action2","actionsArray","runAction","sequence","length","req","method","evt_id","http","sendGame","resp","removeAllChildren","i","select_result","multi_select","instantiate","value1","value2","parent"],"mappings":"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","file":"Handler.js","sourceRoot":"..\\..\\..\\..\\assets\\Script","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        event_atlas: {\r\n            default: null,\r\n            type: cc.SpriteAtlas\r\n        },\r\n        card_atlas: {\r\n            default: null,\r\n            type: cc.SpriteAtlas\r\n        },\r\n        event: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        card: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        multi_select_panel: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        multi_select_prefab: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        modi: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    onLoad: function () {\r\n        this.event.on(cc.Node.EventType.TOUCH_START, this.onClick.bind(this))\r\n    },\r\n    init: function (event, type, selects, state, father) {\r\n        this.father = father\r\n        this.event_type = event;\r\n        this.card_type = type\r\n        this.selects = selects\r\n        this.multi_select_panel.active = false\r\n        let sprite_name = \"\"\r\n        if (this.event_type != 5) {\r\n            let evt_sprite = {\r\n                4: 'gang', 3: 'peng', 2: 'eat', 0: 'pass'\r\n            }\r\n            sprite_name = \"btn_\" + evt_sprite[this.event_type] + \"_cs\"\r\n            this.event.scale = 1.3\r\n        } else {\r\n            this.modi.active = true\r\n            let win_type = {\r\n                1: \"tianhu\", 2: \"qingyise\", 3: \"hunyise\", 4: \"qiangjin\", 5: \"jinlong\", 6: \"jinque\", 7: \"threejinhu\", 8: \"fourjin\", 9: \"jingang\",\r\n                10: \"pinghu\", 11: \"pinghu\", 12: \"qidui\", 13: \"dandiao\", 14: \"dihu\", 98: \"zimohu\", 99: \"pinghu\"\r\n            }\r\n            sprite_name = win_type[state]\r\n        }\r\n        let eventframe = this.event_atlas.getSpriteFrame(sprite_name);\r\n        this.event.getComponent(cc.Sprite).spriteFrame = eventframe;\r\n\r\n        if (this.event_type != 0) {\r\n            let cardfame = this.card_atlas.getSpriteFrame('p4s' + type + '_' + this.selects[0].value + '_big');\r\n            this.card.getComponent(cc.Sprite).spriteFrame = cardfame;\r\n        } else {\r\n            this.card.active = false\r\n        }\r\n    },\r\n    onClick: function () {\r\n        let old_scale = this.event.scale\r\n        let action1 = cc.scaleTo(0.1, old_scale + 0.1);\r\n        let action2 = cc.scaleTo(0.1, old_scale);\r\n        let actionsArray = [action1, action2];\r\n        this.event.runAction(cc.sequence(actionsArray));\r\n\r\n        if (this.event_type == 0 || this.selects.length == 1) {\r\n            let req = { method: \"handle_event\", event: this.event_type }\r\n            if (this.selects && this.selects[0].evt_id) {\r\n                req.evt_id = this.selects[0].evt_id\r\n            }\r\n            http.sendGame(req, (resp) => { })\r\n            this.father.removeAllChildren()\r\n        } else {\r\n            if (this.multi_select_panel.active) return\r\n            for (let i = 0; i < this.selects.length; i++) {\r\n                let select_result = this.selects[i]\r\n                let multi_select = cc.instantiate(this.multi_select_prefab)\r\n                multi_select.getComponent(\"MultiHandler\").init(this.event_type, select_result.evt_id, this.card_type, select_result.value, select_result.value1, select_result.value2, this.father)\r\n                multi_select.parent = this.multi_select_panel\r\n            }\r\n            this.multi_select_panel.active = true\r\n        }\r\n    }\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    // start () {\r\n\r\n    // },\r\n\r\n    // update (dt) {},\r\n});\r\n"]}